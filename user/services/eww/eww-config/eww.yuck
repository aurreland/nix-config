(defvar eww "$HOME/.nix-profile/bin/eww -c $HOME/.config/eww/")

; Bar
(defwindow bar
  :monitor 0
  :geometry (geometry :x "0%"
                      :y "0px"
                      :width "100%"
                      :height "20px"
                      :anchor "top center")
  :exclusive "true"
  (bar))

(defwidget bar []
  (centerbox :orientation "h"
    (left)
    (center)
    (right)))

(defwidget left []
  (box :class "left" :orientation "h" :space-evenly false :halign "start"
    (launcher)
    (sep)
    (workspaces)))

(defwidget center []
  (box :class "center" :orientation "h" :space-evenly false :halign "center"
    (music)))

(defwidget right []
  (box :class "right" :orientation "h" :space-evenly false :halign "end"
    (volume) (sep) (clock_module) (sep) (power)))

; Separator
(defwidget sep []
  (box :class "module-2" :vexpand "false" :hexpand "false"
    (label :class "separ" :text "|")))

; Launcher
(defwidget launcher []
  (button :class "launcher" :onclick "" "󱄅"))

; Workspaces
(deflisten workspace
  "scripts/workspaces.sh")

(defwidget workspaces []
  (literal :content workspace))

; Music
(defpoll music :interval "10s"
  "mpc current || true")

(defvar music_reveal false)

(defpoll song :interval "2s" "scripts/music_info.sh --song")
(defpoll song_status :interval "2s" "scripts/music_info.sh --status")

(defwidget music []
  (eventbox :onhover "${eww} update music_reveal=true"
            :onhoverlost "${eww} update music_reveal=false"
    (box :class "module-2" :orientation "h" :space-evenly false :vexpand false :hexpand false
      (label :class "song" :text song)
      (revealer :transition "slideright" :reveal music_reveal :duration "350ms"
        (box :vexpand false :hexpand false :orientation "h" :spacing 5
          (button :class "song_btn_prev" :onclick "scripts/music_info.sh --prev" "")
          (button :class "song_btn_play" :onclick "scripts/music_info.sh --toggle" song_status)
          (button :class "song_btn_next" :onclick "scripts/music_info.sh --next" ""))))))

; Volume
(defvar vol_reveal false)
  (defpoll volume_percent :interval "3s" "amixer -D pipewire sget Master | awk -F '[^0-9]+' '/Left:/{print $3}'")

  (defwidget volume []
    (eventbox :onhover "${eww} update vol_reveal=true"
              :onhoverlost "${eww} update vol_reveal=false"
      (box :class "module-2" :space-evenly "false" :orientation "h" :spacing "3"
        (revealer :transition "slideleft"
                  :reveal vol_reveal
                  :duration "350ms"
          (scale    :class "volbar"
                    :value volume_percent
                    :orientation "h"
                    :tooltip "${volume_percent}%"
                    :max 100
                    :min 0
                    :onchange "amixer -D pipewire sset Master {}%" ))
        (button   :onclick "pypr toggle volume"   :class "volume_icon" ""))))

; Clock
(defpoll clock_time :interval "5m" "date +\%H")
(defpoll clock_minute :interval "5s" "date +\%M")
(defpoll clock_date :interval "10h" "date '+%d/%m'")
(defvar time_rev false)

(defwidget clock_module []
  (eventbox :onhover "${eww} update time_rev=true"
		        :onhoverlost "${eww} update time_rev=false"
    (box :class "module" :space-evenly "false" :orientation "h" :spacing "3"
      (label :text clock_time :class "clock_time_class" )
      (label :text ":" :class "clock_time_sep" )
      (label :text clock_minute :class "clock_minute_class")
      (revealer :transition "slideleft"
		            :reveal time_rev
		            :duration "350ms"
        (label :class "clock_date_class" :text clock_date)))))

; Power
(defvar power false)

(defwidget power []
  (eventbox :onhover "${eww} update power=true"
            :onhoverlost "${eww} update power=false"
    (box  :orientation "h"
          :space-evenly "false"
          :hexpand "false"
          :class "powermenu"
      (revealer :transition "slideleft"
                :reveal power
                :duration "550ms"
        (box  :orientation "h"
              :space-evenly "true"
              :spacing 5
          (button :class "button-reboot"
                  :tooltip "Reboot"
                  :onclick "reboot" "  ")
          (button :class "button-logout"
                  :tooltip "Logout"
                  :onclick "hyprctl dispatch exit" " 󰗼 ")))
      (button :class "button-off"
              :tooltip "Shutdown"
              :onclick "shutdown 0" "  "))))
